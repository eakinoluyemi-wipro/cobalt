steps:
  - task: AzureCLI@1
    condition: always()
    displayName: 'TF destroy'
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION_NAME)'
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        #!/usr/bin/env bash
        set -euo pipefail
        set -o nounset

        function terraformVersionCheck() {
            if [[ $(which terraform) && $(terraform --version | head -n1 | cut -d" " -f2 | cut -c 2\-) == $TF_VERSION ]]; then
                echo "Terraform version check completed"
              else
                TF_ZIP_TARGET="https://releases.hashicorp.com/terraform/$TF_VERSION/terraform_${TF_VERSION}_linux_amd64.zip"
                echo "Info: installing $TF_VERSION, target: $TF_ZIP_TARGET"

                wget $TF_ZIP_TARGET -q
                unzip -q "terraform_${TF_VERSION}_linux_amd64.zip"
                sudo mv terraform /usr/local/bin
                rm *.zip
            fi

            terraform -version
            # Assert that jq is available, and install if it's not
            command -v jq >/dev/null 2>&1 || { echo >&2 "Installing jq"; sudo apt install -y jq; }
        }
        terraformVersionCheck

        cd "$TF_TEMPLATE_WORKING_DIR"

        # Setting the scripts to be run as executable
        chmod -R 752 .terraform

        export ARM_TENANT_ID=$tenantId
        export ARM_CLIENT_SECRET=$servicePrincipalKey
        export ARM_CLIENT_ID=$servicePrincipalId
        export ARM_ACCESS_KEY=$(az storage account keys list --subscription "$ARM_SUBSCRIPTION_ID" --account-name "$REMOTE_STATE_ACCOUNT" --query "[0].value" --output tsv)

        TF_CLI_ARGS=${TF_CLI_ARGS:-}

        terraform destroy $TF_CLI_ARGS -auto-approve
        terraform workspace select default
        terraform workspace delete "$TF_WORKSPACE_NAME"
